
# Configurables.

set(NGX_PREFIX "/nginx"  CACHE STRING "nginx install prefix")

set(NGX_SBIN_PATH       "${NGX_PREFIX}/bin/nginx"       CACHE STRING "")
set(NGX_MODULES_PATH    "${NGX_PREFIX}/modules"         CACHE STRING "")
set(NGX_CONF_PATH       "${NGX_PREFIX}/conf/nginx.cnf" CACHE STRING "")
set(NGX_ERROR_LOG_PATH  "${NGX_PREFIX}/logs/error.log"  CACHE STRING "")
set(NGX_PID_PATH        "${NGX_PREFIX}/logs/nginx.pid"  CACHE STRING "")
set(NGX_LOCK_PATH       "${NGX_PREFIX}/logs/nginx.lck" CACHE STRING "")
set(NGX_USER            "nobody"          CACHE STRING "nginx user")
set(NGX_GROUP           "nogroup"         CACHE STRING "nginx group")
set(NGX_PLATFORM "" CACHE STRING "NGX platform to build for")
set(NGX_BUILD "")

set(EVENT_SELECT "NO")
set(EVENT_POLL "YES")
set(USE_THREADS "NO")
set(NGX_FILE_AIO "NO")
set(NGX_SEND_FILE "YES")
set(HTTP "YES")
set(HTTP_CACHE "YES")
set(NGX_HTTP_LOG_PATH          "logs/access.log"  CACHE STRING "")
set(NGX_HTTP_CLIENT_TEMP_PATH  "temp/client"      CACHE STRING "")
set(NGX_HTTP_PROXY_TEMP_PATH   "temp/proxy"       CACHE STRING "")
set(NGX_HTTP_FASTCGI_TEMP_PATH "temp/fastcgi"     CACHE STRING "")
set(NGX_HTTP_UWSGI_TEMP_PATH   "temp/uwsgi"       CACHE STRING "")
set(NGX_HTTP_SCGI_TEMP_PATH    "temp/scgi"        CACHE STRING "")
set(HTTP_SSL "NO")
set(HTTP_V2 "NO")
set(HTTP_REALIP "NO")
set(HTTP_ADDITION "NO")
set(HTTP_XSLT "NO")
set(HTTP_IMAGE_FILTER "NO")
set(HTTP_GEOIP "NO")
set(HTTP_SUB "NO")
set(HTTP_DAV "NO")
set(HTTP_FLV "NO")
set(HTTP_MP4 "NO")
set(HTTP_GUNZIP "NO")
set(HTTP_GZIP_STATIC "NO")
set(HTTP_AUTH_REQUEST "NO")
set(HTTP_RANDOM_INDEX "NO")
set(HTTP_SECURE_LINK "NO")
set(HTTP_DEGRADATION "NO")
set(HTTP_SLICE "NO")
set(HTTP_CHARSET "YES")
set(HTTP_GZIP "NO")
set(HTTP_SSI "NO")
set(HTTP_USERID "NO")
set(HTTP_ACCESS "NO")
set(HTTP_AUTH_BASIC "NO")
set(HTTP_AUTOINDEX "NO")
set(HTTP_GEO "NO")
set(HTTP_MAP "NO")
set(HTTP_SPLIT_CLIENTS "NO")
set(HTTP_REFERER "NO")
set(HTTP_REWRITE "NO")
set(HTTP_PROXY "NO")
set(HTTP_FASTCGI "NO")
set(HTTP_UWSGI "NO")
set(HTTP_SCGI "NO")
set(HTTP_MEMCACHED "NO")
set(HTTP_LIMIT_CONN "NO")
set(HTTP_LIMIT_REQ "NO")
set(HTTP_EMPTY_GIF "NO")
set(HTTP_BROWSER "NO")
set(HTTP_UPSTREAM_HASH "NO")
set(HTTP_UPSTREAM_IP_HASH "NO")
set(HTTP_UPSTREAM_LEAST_CONN "NO")
set(HTTP_UPSTREAM_KEEPALIVE "NO")
set(HTTP_UPSTREAM_ZONE "NO")
set(HTTP_PERL "NO")
set(HTTP_STUB_STATUS "NO")
set(MAIL "NO")
set(MAIL_SSL "NO")
set(MAIL_POP3 "NO")
set(MAIL_IMAP "NO")
set(MAIL_SMTP "NO")
set(STREAM "NO")
set(STREAM_SSL "NO")
set(STREAM_REALIP "NO")
set(STREAM_GEOIP "NO")
set(STREAM_SSL_PREREAD "NO")
set(STREAM_LIMIT_CONN "NO")
set(STREAM_ACCESS "NO")
set(STREAM_GEO "NO")
set(STREAM_MAP "NO")
set(STREAM_SPLIT_CLIENTS "NO")
set(STREAM_RETURN "NO")
set(STREAM_UPSTREAM_HASH "NO")
set(STREAM_UPSTREAM_LEAST_CONN "NO")
set(STREAM_UPSTREAM_ZONE "NO")
set(NGX_GOOGLE_PERFTOOLS "NO")
set(NGX_CPP_TEST "NO")
set(NGX_COMPAT "NO")
set(NGX_DEBUG "NO" CACHE STRING "enable nginx debug")

# end of configurables

# ngx: auto/options script

set(USE_PCRE "NO")
set(EVENT_FOUND "NO")
set(HTTP_POSTPONE "NO")
set(DYNAMIC_MODULES "")
set(USE_OPENSSL "NO")
set(USE_ZLIB "NO")
set(USE_PERL "NO")
set(NGX_PERL "perl")
set(USE_LIBXSLT "NO")
set(USE_LIBGD "NO")
set(USE_GEOIP "NO")
set(NGX_LIBATOMIC "NO")
set(NGX_CONFIGURE "")
set(NGX_TEST_BUILD_EPOLL "NO")

if (HTTP STREQUAL "NO")
    set(HTTP_CHARSET "NO")
    set(HTTP_GZIP    "NO")
    set(HTTP_SSI     "NO")
    set(HTTP_USERID  "NO")
    set(HTTP_ACCESS  "NO")
    set(HTTP_REWRITE "NO")
    set(HTTP_PROXY   "NO")
    set(HTTP_FASTCGI "NO")
endif()

get_filename_component(NGX_CONF_PREFIX "${NGX_CONF_PATH}" DIRECTORY)

# ngx: auto/init script

set(AUTOGENERATED_DIR "${CMAKE_BINARY_DIR}/autogenerated")
file(MAKE_DIRECTORY "${AUTOGENERATED_DIR}")

set(NGX_MODULES_C_NAME "${AUTOGENERATED_DIR}/ngx_modules.c")
set(NGX_AUTO_HEADERS_H_NAME "${AUTOGENERATED_DIR}/ngx_auto_headers.h")
set(NGX_AUTO_CONFIG_H_NAME "${AUTOGENERATED_DIR}/ngx_auto_config.h")

# clear autogenerated files
file(WRITE "${NGX_AUTO_CONFIG_H_NAME}" "")
file(WRITE "${NGX_AUTO_HEADERS_H_NAME}" "\n")
file(WRITE "${NGX_MODULES_C_NAME}" "")

function(ngx_auto_have option_name)
    set(A "\n")
    set(A "${A}#ifndef ${option_name}\n")
    set(A "${A}#define ${option_name}  1\n")
    set(A "${A}#endif\n\n")
    file(APPEND "${NGX_AUTO_CONFIG_H_NAME}" "${A}")
endfunction()

function(ngx_auto_nohave option_name)
    set(A "\n")
    set(A "${A}#ifndef ${option_name}\n")
    set(A "${A}#define ${option_name}  0\n")
    set(A "${A}#endif\n\n")
    file(APPEND "${NGX_AUTO_CONFIG_H_NAME}" "${A}")
endfunction()

function(ngx_auto_define option_name option_value)
    set(A "\n")
    set(A "${A}#ifndef ${option_name}\n")
    set(A "${A}#define ${option_name}  ${option_value}\n")
    set(A "${A}#endif\n\n")
    file(APPEND "${NGX_AUTO_CONFIG_H_NAME}" "${A}")
endfunction()

function(ngx_auto_have_headers option_name)
    set(A "\n")
    set(A "${A}#ifndef ${option_name}\n")
    set(A "${A}#define ${option_name}  1\n")
    set(A "${A}#endif\n\n")
    file(APPEND "${NGX_AUTO_HEADERS_H_NAME}" "${A}")
endfunction()

function(ngx_append_auto_config str)
    file(APPEND "${NGX_AUTO_CONFIG_H_NAME}" "${str}\n")
endfunction()

ngx_append_auto_config("#define NGX_CONFIGURE \"${NGX_CONFIGURE}\"")

if (NGX_DEBUG STREQUAL "YES")
    ngx_auto_have("NGX_DEBUG")
endif()

function(ngx_auto_module)
    set(ngx_var "${ngx_module_type}")

    if ("x${ngx_module_type}" MATCHES "^xHTTP_")
        set(ngx_var "HTTP")
    endif()

    if ("${ngx_module_link}" STREQUAL "DYNAMIC")
        foreach (ngx_module ${ngx_module_name})
            # extract the first name
            break()
        endforeach()

        set(DYNAMIC_MODULES ${DYNAMIC_MODULES} "${ngx_module}" PARENT_SCOPE)
        set(${ngx_module}_SRC ${ngx_module_srcs} PARENT_SCOPE)
        set(${ngx_module}_MODULES ${ngx_module_name} PARENT_SCOPE)

        if ("${ngx_module_order}" STREQUAL "" AND
        ("${ngx_module_type}" STREQUAL "HTTP_FILTER" OR
                "${ngx_module_type}" STREQUAL "HTTP_AUX_FILTER"))

            set(${ngx_module}_ORDER
                    "${ngx_module_name} ngx_http_copy_filter_module" PARENT_SCOPE)
        else()
            set(${ngx_module}_ORDER "${ngx_module_order}" PARENT_SCOPE)
        endif()

        set(libs "")
        foreach(lib ${ngx_module_libs})
            if ("${lib}" STREQUAL "LIBXSLT" OR "${lib}" STREQUAL "LIBGD" OR
                    "${lib}" STREQUAL "GEOIP" OR "${lib}" STREQUAL "PERL")

                if (${USE_${lib}} STREQUAL "NO")
                    set(USE_${lib} "DYNAMIC" PARENT_SCOPE)
                endif()

            elseif ("${lib}" STREQUAL "PCRE" OR "${lib}" STREQUAL "OPENSSL" OR
                    "${lib}" STREQUAL "ZLIB")

                set(USE_${lib} "YES" PARENT_SCOPE)

            elseif ("${lib}" STREQUAL "MD5" OR "${lib}" STREQUAL "SHA1")

                # obsolete

            else()
                set(libs ${libs} "${lib}")
            endif()
        endforeach()

        set(${ngx_module}_LIBS ${libs} PARENT_SCOPE)

    elseif ("${ngx_module_link}" STREQUAL "YES")

        set(${ngx_module_type}_MODULES ${${ngx_module_type}_MODULES}
                ${ngx_module_name} PARENT_SCOPE)

        set(${ngx_var}_SRCS ${${ngx_var}_SRCS} ${ngx_module_srcs} PARENT_SCOPE)

        foreach(lib ${ngx_module_libs})
            if ("x${lib}" STREQUAL "xPCRE" OR "x${lib}" STREQUAL "xOPENSSL" OR
                    "x${lib}" STREQUAL "xZLIB" OR "x${lib}" STREQUAL "xLIBXSLT" OR
                    "x${lib}" STREQUAL "xLIBGD" OR "x${lib}" STREQUAL "xPERL" OR
                    "x${lib}" STREQUAL "xGEOIP")

                set(USE_${lib} "YES" PARENT_SCOPE)

            elseif ("${lib}" STREQUAL "MD5" OR "${lib}" STREQUAL "SHA1")

                # obsolete

            else()
                set(CORE_LIBS ${CORE_LIBS} ${lib} PARENT_SCOPE)
            endif()
        endforeach()

    elseif ("${ngx_module_link}" STREQUAL "ADDON")

        set(${ngx_module_type}_MODULES ${${ngx_module_type}_MODULES}
                ${ngx_module_name} PARENT_SCOPE)

        set(NGX_ADDON_SRCS ${NGX_ADDON_SRCS} ${ngx_module_srcs} PARENT_SCOPE)

        foreach (lib ${ngx_module_libs})
            if ("${lib}" STREQUAL "PCRE" OR "${lib}" STREQUAL "OPENSSL" OR
                    "${lib}" STREQUAL "ZLIB" OR "${lib}" STREQUAL "LIBXSLT" OR
                    "${lib}" STREQUAL "LIBGD" OR "${lib}" STREQUAL "PERL" OR
                    "${lib}" STREQUAL "GEOIP")

                set(USE_${lib} "YES" PARENT_SCOPE)

            elseif ("${lib}" STREQUAL "" OR "${lib}" STREQUAL "")

                # obsolete

            else()
                set(CORE_LIBS ${CORE_LIBS} ${lib} PARENT_SCOPE)
            endif()
        endforeach()
    endif()
endfunction()

# Just define these statically

ngx_auto_have_headers("NGX_CHERIOS")
ngx_auto_have_headers("NGX_HAVE_UNISTD_H")
ngx_auto_have_headers("NGX_HAVE_INTTYPES_H")
ngx_auto_have_headers("NGX_HAVE_LIMITS_H")
ngx_auto_have_headers("NGX_HAVE_UNISTD_H")

ngx_auto_have("NGX_SMP")
ngx_auto_have("NGX_HAVE_ATOMIC_OPS")
ngx_auto_have("NGX_HAVE_CASELESS_FILESYSTEM")
ngx_auto_have("NGX_HAVE_C99_VARIADIC_MACROS")
ngx_auto_have("NGX_HAVE_GCC_VARIADIC_MACROS")
ngx_auto_have("NGX_HAVE_GCC_BSWAP64")
ngx_auto_have("NGX_HAVE_CLEAR_EVENT")
ngx_auto_have("NGX_HAVE_STATFS")
ngx_auto_have("NGX_HAVE_STATVFS")
ngx_auto_have("NGX_HAVE_SCHED_YIELD")
ngx_auto_have("NGX_HAVE_SCHED_SETAFFINITY")
ngx_auto_have("NGX_HAVE_REUSEPORT")
ngx_auto_have("NGX_HAVE_DEFERRED_ACCEPT")
ngx_auto_have("NGX_HAVE_KEEPALIVE_TUNABLE")
ngx_auto_have("NGX_HAVE_ACCEPT4")
ngx_auto_nohave("NGX_HAVE_EVENTFD")
ngx_auto_have("NGX_HAVE_SYS_EVENTFD_H")
ngx_auto_have("NGX_HAVE_PREAD")
ngx_auto_have("NGX_HAVE_PWRITEV")
ngx_auto_have("NGX_HAVE_CLOCK_MONOTONIC")
ngx_auto_have("NGX_HAVE_POSIX_MEMALIGN")
ngx_auto_have("NGX_HAVE_MEMALIGN")
ngx_auto_have("NGX_HAVE_MAP_ANON")
ngx_auto_have("NGX_HAVE_MAP_DEVZERO")
ngx_auto_have("NGX_HAVE_SYSVSHM")
ngx_auto_have("NGX_HAVE_MSGHDR_MSG_CONTROL")
ngx_auto_have("NGX_HAVE_GMTOFF")
ngx_auto_have("NGX_HAVE_D_TYPE")
ngx_auto_have("NGX_HAVE_SC_NPROCESSORS_ONLN")
ngx_auto_have("NGX_HAVE_LEVEL1_DCACHE_LINESIZE")
ngx_auto_have("NGX_HAVE_GETADDRINFO")


ngx_auto_nohave("NGX_HAVE_NONALIGNED")
ngx_auto_nohave("NGX_HAVE_O_DIRECT")
ngx_auto_nohave("NGX_HAVE_ALIGNED_DIRECTIO")
ngx_auto_nohave("NGX_HAVE_DLOPEN")
ngx_auto_nohave("NGX_HAVE_IP_BIND_ADDRESS_NO_PORT")
ngx_auto_nohave("NGX_HAVE_IP_PKTINFO")
ngx_auto_nohave("NGX_HAVE_UNIX_DOMAIN")
ngx_auto_nohave("NGX_HAVE_INET6")
ngx_auto_nohave("NGX_HAVE_PWRITE")
ngx_auto_nohave("NGX_HAVE_POSIX_SEM")
ngx_auto_nohave("NGX_HAVE_OPENAT")

ngx_auto_nohave("NGX_HAVE_AIO_SENDFILE")

if("${NGX_SEND_FILE}" STREQUAL "YES")
    ngx_auto_define("NGX_IO_SENDFILE" "1")
    ngx_auto_have("NGX_HAVE_QUEUE_AIO")
    ngx_auto_have("NGX_HAVE_SENDFILE")
    ngx_auto_have("NGX_HAVE_SENDFILE64")
    set(SENDFILE_SRCS src/os/cherios/ngx_cherios_sendfile_chain.c)
else()
    ngx_auto_nohave("NGX_HAVE_QUEUE_AIO")
    ngx_auto_nohave("NGX_IO_SENDFILE")
    set(SENDFILE_SRCS)
endif()

if ("${NGX_FILE_AIO}" STREQUAL "YES")
    ngx_auto_have("NGX_HAVE_FILE_AIO")
    set(AIO_SRCS src/os/unix/ngx_file_aio_read.c)
else()
    ngx_auto_nohave("NGX_HAVE_FILE_AIO")
    set(AIO_SRCS)
endif()

ngx_auto_define("NGX_PREFIX"         "\"${NGX_PREFIX}/\"")
ngx_auto_define("NGX_CONF_PREFIX"    "\"${NGX_CONF_PREFIX}/\"")

ngx_auto_define("NGX_SBIN_PATH"      "\"${NGX_SBIN_PATH}\"")
ngx_auto_define("NGX_CONF_PATH"      "\"${NGX_CONF_PATH}\"")
ngx_auto_define("NGX_PID_PATH"       "\"${NGX_PID_PATH}\"")
ngx_auto_define("NGX_LOCK_PATH"      "\"${NGX_LOCK_PATH}\"")
ngx_auto_define("NGX_ERROR_LOG_PATH" "\"${NGX_ERROR_LOG_PATH}\"")

ngx_auto_define("NGX_HTTP_LOG_PATH"          "\"${NGX_HTTP_LOG_PATH}\"")
ngx_auto_define("NGX_HTTP_CLIENT_TEMP_PATH"  "\"${NGX_HTTP_CLIENT_TEMP_PATH}\"")
ngx_auto_define("NGX_HTTP_PROXY_TEMP_PATH"   "\"${NGX_HTTP_PROXY_TEMP_PATH}\"")
ngx_auto_define("NGX_HTTP_FASTCGI_TEMP_PATH" "\"${NGX_HTTP_FASTCGI_TEMP_PATH}\"")
ngx_auto_define("NGX_HTTP_UWSGI_TEMP_PATH"   "\"${NGX_HTTP_UWSGI_TEMP_PATH}\"")
ngx_auto_define("NGX_HTTP_SCGI_TEMP_PATH"    "\"${NGX_HTTP_SCGI_TEMP_PATH}\"")

ngx_auto_define("NGX_USER" "\"${NGX_USER}\"")
ngx_auto_define("NGX_GROUP" "\"${NGX_GROUP}\"")

ngx_auto_define("NGX_PTR_SIZE"  "CAP_SIZE")
ngx_auto_define("NGX_SIG_ATOMIC_T_SIZE"  "CAP_SIZE")
ngx_auto_define("NGX_HAVE_LITTLE_ENDIAN"  "0")
ngx_auto_define("NGX_MAX_SIZE_T_VALUE"  "9223372036854775807LL")
ngx_auto_define("NGX_SIZE_T_LEN"  "(sizeof(\"-9223372036854775808\") - 1)")
ngx_auto_define("NGX_MAX_OFF_T_VALUE"  "9223372036854775807LL")
ngx_auto_define("NGX_OFF_T_LEN"  "(sizeof(\"-9223372036854775808\") - 1)")
ngx_auto_define("NGX_TIME_T_SIZE"  "8")
ngx_auto_define("NGX_TIME_T_LEN"  "(sizeof(\"-9223372036854775808\") - 1)")
ngx_auto_define("NGX_MAX_TIME_T_VALUE"  "9223372036854775807LL")

set(CORE_MODULES ngx_core_module ngx_errlog_module ngx_conf_module)

set(CORE_SRCS
        src/core/nginx.c
        src/core/ngx_log.c
        src/core/ngx_palloc.c
        src/core/ngx_array.c
        src/core/ngx_list.c
        src/core/ngx_hash.c
        src/core/ngx_buf.c
        src/core/ngx_queue.c
        src/core/ngx_output_chain.c
        src/core/ngx_string.c
        src/core/ngx_parse.c
        src/core/ngx_parse_time.c
        src/core/ngx_inet.c
        src/core/ngx_file.c
        src/core/ngx_crc32.c
        src/core/ngx_murmurhash.c
        src/core/ngx_md5.c
        src/core/ngx_sha1.c
        src/core/ngx_rbtree.c
        src/core/ngx_radix_tree.c
        src/core/ngx_slab.c
        src/core/ngx_times.c
        src/core/ngx_shmtx.c
        src/core/ngx_connection.c
        src/core/ngx_cycle.c
        src/core/ngx_spinlock.c
        src/core/ngx_rwlock.c
        src/core/ngx_cpuinfo.c
        src/core/ngx_conf_file.c
        src/core/ngx_module.c
        src/core/ngx_resolver.c
        src/core/ngx_open_file_cache.c
        src/core/ngx_crypt.c
        src/core/ngx_proxy_protocol.c
        src/core/ngx_syslog.c
)

set(EVENT_MODULES ngx_events_module ngx_event_core_module)

set(EVENT_SRCS
        src/event/ngx_event.c
        src/event/ngx_event_timer.c
        src/event/ngx_event_posted.c
        src/event/ngx_event_accept.c
        src/event/ngx_event_connect.c
        src/event/ngx_event_pipe.c
)

set(THREAD_POOL_MODULE ngx_thread_pool_module)
set(THREAD_POOL_SRCS
        src/core/ngx_thread_pool.c
        src/os/cherios/ngx_thread_cond.c
        src/os/cherios/ngx_thread_mutex.c
        src/os/cherios/ngx_thread_id.c
)

set(HTTP_FILE_CACHE_SRCS src/http/ngx_http_file_cache.c)

set(HTTP_SRCS
        src/http/ngx_http.c
        src/http/ngx_http_core_module.c
        src/http/ngx_http_special_response.c
        src/http/ngx_http_request.c
        src/http/ngx_http_parse.c
        src/http/modules/ngx_http_log_module.c
        src/http/ngx_http_request_body.c
        src/http/ngx_http_variables.c
        src/http/ngx_http_script.c
        src/http/ngx_http_upstream.c
        src/http/ngx_http_upstream_round_robin.c
)

set(POLL_MODULE ngx_poll_module)
set(POLL_SRCS src/event/modules/ngx_poll_module.c)
set(EVENT_POLL "YES")

if ("${EVENT_POLL}" STREQUAL "YES")
    ngx_auto_have("NGX_HAVE_POLL")
    set(CORE_SRCS ${CORE_SRCS} ${POLL_SRCS})
    set(EVENT_MODULES ${EVENT_MODULES} ${POLL_MODULE})
    set(EVENT_FOUND "YES")
endif()

set(ngx_module_type "HTTP")
set(ngx_module_name
        ngx_http_module
        ngx_http_core_module
        ngx_http_log_module
        ngx_http_upstream_module
)

set(ngx_module_srcs
        src/http/ngx_http.c
        src/http/ngx_http_core_module.c
        src/http/ngx_http_special_response.c
        src/http/ngx_http_request.c
        src/http/ngx_http_parse.c
        src/http/modules/ngx_http_log_module.c
        src/http/ngx_http_request_body.c
        src/http/ngx_http_variables.c
        src/http/ngx_http_script.c
        src/http/ngx_http_upstream.c
        src/http/ngx_http_upstream_round_robin.c
)

set(ngx_module_libs "")
set(ngx_module_link "YES")
ngx_auto_module()

if (NOT "${HTTP}" STREQUAL "YES")
    ngx_auto_nohave("NGX_CRYPT")
    set(CRYPT_LIB "")
endif()


if ("${HTTP_CACHE}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_CACHE")
    set(HTTP_SRCS ${HTTP_SRCS} ${HTTP_FILE_CACHE_SRCS})
endif()


if ("${HTTP_SSI}" STREQUAL "YES")
    set(HTTP_POSTPONE "YES")
endif()


if ("${HTTP_SLICE}" STREQUAL "YES")
    set(HTTP_POSTPONE "YES")
endif()


if ("${HTTP_ADDITION}" STREQUAL "YES")
    set(HTTP_POSTPONE "YES")
endif()


# the module order is important
#     ngx_http_static_module
#     ngx_http_gzip_static_module
#     ngx_http_dav_module
#     ngx_http_autoindex_module
#     ngx_http_index_module
#     ngx_http_random_index_module
#
#     ngx_http_access_module
#     ngx_http_realip_module
#
#
# the filter order is important
#     ngx_http_write_filter
#     ngx_http_header_filter
#     ngx_http_chunked_filter
#     ngx_http_v2_filter
#     ngx_http_range_header_filter
#     ngx_http_gzip_filter
#     ngx_http_postpone_filter
#     ngx_http_ssi_filter
#     ngx_http_charset_filter
#         ngx_http_xslt_filter
#         ngx_http_image_filter
#         ngx_http_sub_filter
#         ngx_http_addition_filter
#         ngx_http_gunzip_filter
#         ngx_http_userid_filter
#         ngx_http_headers_filter
#     ngx_http_copy_filter
#     ngx_http_range_body_filter
#     ngx_http_not_modified_filter
#     ngx_http_slice_filter

set(ngx_module_type "HTTP_FILTER")
set(HTTP_FILTER_MODULES "")

set(ngx_module_order
        ngx_http_static_module
        ngx_http_gzip_static_module
        ngx_http_dav_module
        ngx_http_autoindex_module
        ngx_http_index_module
        ngx_http_random_index_module
        ngx_http_access_module
        ngx_http_realip_module
        ngx_http_write_filter_module
        ngx_http_header_filter_module
        ngx_http_chunked_filter_module
        ngx_http_v2_filter_module
        ngx_http_range_header_filter_module
        ngx_http_gzip_filter_module
        ngx_http_postpone_filter_module
        ngx_http_ssi_filter_module
        ngx_http_charset_filter_module
        ngx_http_xslt_filter_module
        ngx_http_image_filter_module
        ngx_http_sub_filter_module
        ngx_http_addition_filter_module
        ngx_http_gunzip_filter_module
        ngx_http_userid_filter_module
        ngx_http_headers_filter_module
        ngx_http_copy_filter_module
        ngx_http_range_body_filter_module
        ngx_http_not_modified_filter_module
        ngx_http_slice_filter_module
        )

set(ngx_module_name "ngx_http_write_filter_module")
set(ngx_module_srcs "src/http/ngx_http_write_filter_module.c")
set(ngx_module_libs "")
set(ngx_module_link "YES")
ngx_auto_module()


set(ngx_module_name "ngx_http_header_filter_module")
set(ngx_module_srcs "src/http/ngx_http_header_filter_module.c")
set(ngx_module_libs "")
set(ngx_module_link "YES")
ngx_auto_module()


set(ngx_module_name "ngx_http_chunked_filter_module")
set(ngx_module_srcs "src/http/modules/ngx_http_chunked_filter_module.c")
set(ngx_module_libs "")
set(ngx_module_link "YES")

ngx_auto_module()


if ("${HTTP_V2}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_v2_filter_module")
    set(ngx_module_srcs "src/http/v2/ngx_http_v2_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_V2}")

    ngx_auto_module()
endif()

if (TRUE)
    set(ngx_module_name "ngx_http_range_header_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_range_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "YES")

    ngx_auto_module()
endif()


if ("${HTTP_GZIP}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_GZIP")
    set(USE_ZLIB "YES")

    set(ngx_module_name "ngx_http_gzip_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_gzip_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_GZIP}")

    ngx_auto_module()
endif()

if ("${HTTP_POSTPONE}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_postpone_filter_module")
    set(ngx_module_srcs "src/http/ngx_http_postpone_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_POSTPONE}")

    ngx_auto_module()
endif()

if ("${HTTP_SSI}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_SSI")

    set(ngx_module_name "ngx_http_ssi_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_ssi_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_SSI}")

    ngx_auto_module()
endif()

if ("${HTTP_CHARSET}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_charset_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_charset_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_CHARSET}")

    ngx_auto_module()
endif()

if (NOT "${HTTP_XSLT}" STREQUAL "NO")
    set(ngx_module_name "ngx_http_xslt_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_xslt_filter_module.c")
    set(ngx_module_libs "LIBXSLT")
    set(ngx_module_link "${HTTP_XSLT}")

    ngx_auto_module()
endif()

if (NOT "${HTTP_IMAGE_FILTER}" STREQUAL "NO")
    set(ngx_module_name "ngx_http_image_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_image_filter_module.c")
    set(ngx_module_libs "LIBGD")
    set(ngx_module_link "${HTTP_IMAGE_FILTER}")

    ngx_auto_module()
endif()

if ("${HTTP_SUB}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_sub_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_sub_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_SUB}")

    ngx_auto_module()
endif()

if ("${HTTP_ADDITION}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_addition_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_addition_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_ADDITION}")

    ngx_auto_module()
endif()

if ("${HTTP_GUNZIP}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_GZIP")
    set(USE_ZLIB "YES")

    set(ngx_module_name "ngx_http_gunzip_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_gunzip_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_GUNZIP}")

    ngx_auto_module()
endif()

if ("${HTTP_USERID}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_userid_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_userid_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_USERID}")

    ngx_auto_module()
endif()

if (TRUE)
    set(ngx_module_name "ngx_http_headers_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_headers_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "YES")

    ngx_auto_module()
endif()


set(ngx_module_type "HTTP_INIT_FILTER")
set(HTTP_INIT_FILTER_MODULES "")

if (TRUE)
    set(ngx_module_name "ngx_http_copy_filter_module")
    set(ngx_module_srcs "src/http/ngx_http_copy_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "YES")

    ngx_auto_module()
endif()

if (TRUE)
    set(ngx_module_name "ngx_http_range_body_filter_module")
    set(ngx_module_srcs "")
    set(ngx_module_libs "")
    set(ngx_module_link "YES")

    ngx_auto_module()
endif()

if (TRUE)
    set(ngx_module_name "ngx_http_not_modified_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_not_modified_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "YES")

    ngx_auto_module()
endif()

if ("${HTTP_SLICE}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_slice_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_slice_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_SLICE}")

    ngx_auto_module()
endif()


set(ngx_module_type "HTTP")

if ("${HTTP_V2}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_V2")

    set(ngx_module_name "ngx_http_v2_module")
    set(ngx_module_srcs
            "src/http/v2/ngx_http_v2.c"
            "src/http/v2/ngx_http_v2_table.c"
            "src/http/v2/ngx_http_v2_huff_decode.c"
            "src/http/v2/ngx_http_v2_huff_encode.c"
            "src/http/v2/ngx_http_v2_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_V2}")

    ngx_auto_module()
endif()

if (TRUE)
    set(ngx_module_name "ngx_http_static_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_static_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "YES")

    ngx_auto_module()
endif()

if ("${HTTP_GZIP_STATIC}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_GZIP")

    set(ngx_module_name "ngx_http_gzip_static_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_gzip_static_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_GZIP_STATIC}")

    ngx_auto_module()
endif()

if ("${HTTP_DAV}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_DAV")

    set(ngx_module_name "ngx_http_dav_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_dav_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_DAV}")

    ngx_auto_module()
endif()

if ("${HTTP_AUTOINDEX}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_autoindex_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_autoindex_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_AUTOINDEX}")

    ngx_auto_module()
endif()

if (TRUE)
    set(ngx_module_name "ngx_http_index_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_index_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "YES")

    ngx_auto_module()
endif()

if ("${HTTP_RANDOM_INDEX}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_random_index_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_random_index_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_RANDOM_INDEX}")

    ngx_auto_module()
endif()

if ("${HTTP_AUTH_REQUEST}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_auth_request_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_auth_request_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_AUTH_REQUEST}")

    ngx_auto_module()
endif()

if ("${HTTP_AUTH_BASIC}" STREQUAL "YES")
    ngx_auto_have("NGX_CRYPT")

    set(ngx_module_name "ngx_http_auth_basic_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_auth_basic_module.c")
    set(ngx_module_libs "${CRYPT_LIB}")
    set(ngx_module_link "${HTTP_AUTH_BASIC}")

    ngx_auto_module()
endif()

if ("${HTTP_ACCESS}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_access_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_access_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_ACCESS}")

    ngx_auto_module()
endif()

if ("${HTTP_LIMIT_CONN}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_limit_conn_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_limit_conn_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_LIMIT_CONN}")

    ngx_auto_module()
endif()

if ("${HTTP_LIMIT_REQ}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_limit_req_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_limit_req_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_LIMIT_REQ}")

    ngx_auto_module()
endif()

if ("${HTTP_REALIP}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_REALIP")
    ngx_auto_have("NGX_HTTP_X_FORWARDED_FOR")

    set(ngx_module_name "ngx_http_realip_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_realip_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_REALIP}")

    ngx_auto_module()
endif()

if ("${HTTP_GEO}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_X_FORWARDED_FOR")

    set(ngx_module_name "ngx_http_geo_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_geo_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_GEO}")

    ngx_auto_module()
endif()

if (NOT "${HTTP_GEOIP}" STREQUAL "NO")
    ngx_auto_have("NGX_HTTP_X_FORWARDED_FOR")

    set(ngx_module_name "ngx_http_geoip_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_geoip_module.c")
    set(ngx_module_libs "GEOIP")
    set(ngx_module_link "${HTTP_GEOIP}")

    ngx_auto_module()
endif()

if ("${HTTP_MAP}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_map_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_map_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_MAP}")

    ngx_auto_module()
endif()

if ("${HTTP_SPLIT_CLIENTS}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_split_clients_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_split_clients_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_SPLIT_CLIENTS}")

    ngx_auto_module()
endif()

if ("${HTTP_REFERER}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_referer_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_referer_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_REFERER}")

    ngx_auto_module()
endif()

if ("${HTTP_REWRITE}" STREQUAL "YES" AND NOT "${USE_PCRE}" STREQUAL "DISABLED")
    set(USE_PCRE "YES")

    set(ngx_module_name "ngx_http_rewrite_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_rewrite_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_REWRITE}")

    ngx_auto_module()
endif()

if ("${HTTP_SSL}" STREQUAL "YES")
    set(USE_OPENSSL "YES")
    ngx_auto_have("NGX_HTTP_SSL")

    set(ngx_module_name "ngx_http_ssl_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_ssl_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_SSL}")

    ngx_auto_module()
endif()

if ("${HTTP_PROXY}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_X_FORWARDED_FOR")

    set(ngx_module_name "ngx_http_proxy_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_proxy_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_PROXY}")

    ngx_auto_module()
endif()

if ("${HTTP_FASTCGI}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_fastcgi_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_fastcgi_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_FASTCGI}")

    ngx_auto_module()
endif()

if ("${HTTP_UWSGI}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_uwsgi_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_uwsgi_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_UWSGI}")

    ngx_auto_module()
endif()

if ("${HTTP_SCGI}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_scgi_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_scgi_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_SCGI}")

    ngx_auto_module()
endif()

if (NOT "${HTTP_PERL}" STREQUAL "NO")
    set(ngx_module_name "ngx_http_perl_module")
    set(ngx_module_srcs "src/http/modules/perl/ngx_http_perl_module.c")
    set(ngx_module_libs "PERL")
    set(ngx_module_link "${HTTP_PERL}")

    ngx_auto_module()
endif()

if ("${HTTP_MEMCACHED}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_memcached_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_memcached_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_MEMCACHED}")

    ngx_auto_module()
endif()

if ("${HTTP_EMPTY_GIF}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_empty_gif_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_empty_gif_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_EMPTY_GIF}")

    ngx_auto_module()
endif()

if ("${HTTP_BROWSER}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_browser_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_browser_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_BROWSER}")

    ngx_auto_module()
endif()

if ("${HTTP_SECURE_LINK}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_secure_link_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_secure_link_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_SECURE_LINK}")

    ngx_auto_module()
endif()

if ("${HTTP_DEGRADATION}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_DEGRADATION")

    set(ngx_module_name "ngx_http_degradation_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_degradation_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_DEGRADATION}")

    ngx_auto_module()
endif()

if ("${HTTP_FLV}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_flv_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_flv_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_FLV}")

    ngx_auto_module()
endif()

if ("${HTTP_MP4}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_mp4_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_mp4_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_MP4}")

    ngx_auto_module()
endif()

if ("${HTTP_UPSTREAM_HASH}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_upstream_hash_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_upstream_hash_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_UPSTREAM_HASH}")

    ngx_auto_module()
endif()

if ("${HTTP_UPSTREAM_IP_HASH}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_upstream_ip_hash_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_upstream_ip_hash_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_UPSTREAM_IP_HASH}")

    ngx_auto_module()
endif()

if ("${HTTP_UPSTREAM_LEAST_CONN}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_upstream_least_conn_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_upstream_least_conn_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_UPSTREAM_LEAST_CONN}")

    ngx_auto_module()
endif()

if ("${HTTP_UPSTREAM_KEEPALIVE}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_upstream_keepalive_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_upstream_keepalive_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_UPSTREAM_KEEPALIVE}")

    ngx_auto_module()
endif()

if ("${HTTP_UPSTREAM_ZONE}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_UPSTREAM_ZONE")

    set(ngx_module_name "ngx_http_upstream_zone_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_upstream_zone_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_UPSTREAM_ZONE}")

    ngx_auto_module()
endif()

if ("${HTTP_STUB_STATUS}" STREQUAL "YES")
    ngx_auto_have("NGX_STAT_STUB")

    set(ngx_module_name "ngx_http_stub_status_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_stub_status_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_STUB_STATUS}")

    ngx_auto_module()
endif()

set(CHERIOS_SRCS
        src/os/cherios/ngx_alloc.c
        src/os/cherios/ngx_atomic.c
        src/os/cherios/ngx_errno.c
        src/os/cherios/ngx_files.c
        src/os/cherios/ngx_os.c
        src/os/cherios/ngx_process.c
        src/os/cherios/ngx_time.c
        src/os/cherios/ngx_shmem.c
)

# For IO we have unix wrappers and should use those

set(UNIX_SRCS
        src/os/unix/ngx_recv.c
        src/os/unix/ngx_readv_chain.c
        src/os/unix/ngx_udp_recv
        src/os/unix/ngx_send.c
        src/os/unix/ngx_udp_send.c
        src/os/unix/ngx_udp_sendmsg_chain.c
        src/os/unix/ngx_writev_chain.c
        ${AIO_SRCS}
        ${SENDFILE_SRCS}
)

include_directories(src/core)
include_directories(src/event)
include_directories(src/http)
include_directories(src/http/modules)
include_directories(src/http/v2)
include_directories(src/mail)
include_directories(src/os/cherios)
include_directories(src/stream)
include_directories("${AUTOGENERATED_DIR}")

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)

set(modules ${CORE_MODULES} ${EVENT_MODULES})
# thread pool module should be initialized after events
if ("${USE_THREADS}" STREQUAL "YES")
    set(modules ${modules} ${THREAD_POOL_MODULE})
endif()
if ("${HTTP}" STREQUAL "YES")
    set(modules ${modules} ${HTTP_MODULES} ${HTTP_FILTER_MODULES}
            ${HTTP_AUX_FILTER_MODULES} ${HTTP_INIT_FILTER_MODULES})
endif()

function(append_modules_c str)
    file(APPEND "${NGX_MODULES_C_NAME}" "${str}")
endfunction()

append_modules_c("\n")
append_modules_c("#include <ngx_config.h>\n")
append_modules_c("#include <ngx_core.h>\n")
append_modules_c("\n")
append_modules_c("${NGX_PRAGMA}\n")
append_modules_c("\n")

foreach (mod ${modules})
    append_modules_c("extern ngx_module_t  ${mod};\n")
endforeach()

append_modules_c("\n")
append_modules_c("ngx_module_t *ngx_modules[] = {\n")

foreach (mod ${modules})
    append_modules_c("    &${mod},\n")
endforeach()

append_modules_c("    NULL\n")
append_modules_c("};\n")
append_modules_c("\n")

append_modules_c("char *ngx_module_names[] = {\n")

foreach (mod ${modules})
    append_modules_c("    \"${mod}\",\n")
endforeach()

append_modules_c("    NULL\n")
append_modules_c("};\n")
append_modules_c("\n")

set(ngx_all_srcs
        ${INIT_ASM}
        ${CORE_SRCS}
        ${CHERIOS_SRCS}
        ${UNIX_SRCS}
        ${EVENT_SRCS}
        "${NGX_MODULES_C_NAME}")

if ("${HTTP}" STREQUAL "YES")
    list(APPEND ngx_all_srcs ${HTTP_SRCS})
endif()

add_cherios_executable(nginx ADD_TO_FILESYSTEM LINKER_SCRIPT sandbox.ld SOURCES
        ${ngx_all_srcs}
)
